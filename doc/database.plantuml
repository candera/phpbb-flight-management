@startuml
' Taken from https://gist.github.com/QuantumGhost/0955a45383a0b6c0bc24f9654b3cb561
!define Table(name,desc) class name as "desc" << (T,#FFAAAA) >>
' we use bold for primary key
' green color for unique
' and underscore for not_null
!define primary_key(x) <b>x</b>
!define unique(x) <color:green>x</color>
!define not_null(x) <u>x</u>
!define foreign_key(x) <color:blue>x</color>
' other tags available:
' <i></i>
' <back:COLOR></color>, where color is a color name or html color code
' (#FFAACC)
' see: http://plantuml.com/classes.html#More
hide methods
hide stereotypes

' TODO: Add modification/version fields to all of these?
' TODO: Do any of these need an "active"?

Table(Theaters, "Theaters") {
  primary_key(Id) INTEGER
  not_null(TheaterName) NVARCHAR[1024]
  not_null(TheaterVersion) NVARCHAR[1024]
  not_null(Active) BOOLEAN
}

Table(MissionTypes, "MissionTypes") {
  primary_key(Id) INTEGER
  not_null(Name) NVARCHAR[1024]
  not_null(Active) BOOLEAN
}

Table(Missions, "Missions") {
  primary_key(Id) INTEGER
  not_null(MissionName) NVARCHAR[1024]
  not_null(MissionDate) DATETIME
  foreign_key(MissionType)
  MissionDescription NVARCHAR[MAX]
  ServerAddress NVARCHAR[1024]
  not_null(MissionDuration) DURATION
  foreigh_key(MissionType)
  foreign_key(MissionTheater)
  LoadoutFixed BOOLEAN
  ActualDuration DURATION
}

Missions::Theater --> Theaters::Id
Missions::MissionType --> MissionTypes::Id

Table(Packages, "Packages") {
  primary_key(Id) INTEGER
  foreign_key(MissionId)
  PackageNumber INTEGER
  PackageName NVARCHAR[1024]
}

Packages::MissionId --> Missions::Id

Table(Roles, "Roles") {
  primary_key(Id) INTEGER
  not_null(RoleName) NVARCHAR[1024]
  not_null(Active) BOOLEAN
}

Table(Aircraft, "Aircraft") {
  primary_key(Id) INTEGER
  not_null(AircraftModel) ???
  not_null(Active) BOOLEAN
}

Table(Flights, "Flights") {
  primary_key(Id) INTEGER
  foreign_key(PackageId)
  not_null(Callsign) NVARCHAR[1024]
  not_null(CallsignNum) INTEGER
  foreign_key(RoleId)
  foreign_key(AircraftId)
  not_null(Seats) INTEGER
  TakeoffTime FALCON_TIME
}

Flights::PackageId --> Packages::Id
Flights::RoleId --> Roles::Id
Flights::AircraftId --> Aircraft::Id


Table(phpbbUsers, "phpbbUsers") {
  primary_key(userid)
}


Table(ScheduledParticipants, "ScheduledParticipants") {
  not_null(SeatNumber) INTEGER
  foreign_key(FlightId) NOT NULL
  foreign_key(MemberPilot) NULL
  NonmemberPilot NVARCHAR[1024]
}

ScheduledParticipants::FlightId --> Flights::Id
ScheduledParticipants::MemberPilot --> phpbbUsers::userid

' Below this point we're into flight log, not ATO

Table(ActualParticipants, "ActualParticipants") {
  not_null(SeatNumber) INTEGER
  foreign_key(FlightId) NOT NULL
  foreign_key(MemberPilot) NULL
  NonmemberPilot NVARCHAR[1024]
  ConfirmedFlown BOOLEAN
}

ActualParticipants::FlightId --> Flights::Id
ActualParticipants::MemberPilot --> phpbbUsers::userid

note as PilotNote
MemberPilot is a ref to the
phpBB user table. If null,
NonmemberPilot holds e.g. the
name of a non-member pilot
end note

ActualParticipants .. PilotNote
ScheduledParticipants .. PilotNote

note as ActualParticipantsNote
This is more about the flight
log than the ATO, but left in to
show that they will be separate
records but will reference some
of the same data.
end note

ActualParticipantsNote .. ActualParticipants

' relationships
' one-to-one relationship
' one to may relationship
' user --> session : "A user may have\n many sessions"
' many to many relationship
' Add mark if you like
' user "1" --> "*" user_group : "A user may be \nin many groups"
' group "1" --> "0..N" user_group : "A group may \ncontain many users"

@enduml
